# Esse aqui é como se fosse um "log" de coisas que preciso fazer no sistema
# Por enquanto, vou deixar nesse formato de .txt simples. Mas talvez precise complexificar depois.

### Coisas a fazer

	## Colocar wallpaper funcional

		# Criar a pasta onde ficarão os wallpapers (compartilhado entre usuários)
		sudo mkdir /usr/share/backgrounds

		# Baixar as imagens desejadas e mover para /usr/share/backgrounds

		# Abrir a .conf do hyperpaper
		micro ~/.config/hypr/hyprpaper.conf

		# Editar a .conf com as linhas:
		preload = /usr/share/backgrounds/[foto]
		wallpaper = , /usr/share/backgrounds/[foto]


	## Botão de power sem funcionar na waybar
		# Verificando ~/.config/waybar/config.jsonc
		# Aparece 	"menu-file": "$HOME/.config/waybar/power_menu.xml" // Menu file in resources folder
		# Não achei nenhuma "resources folder", então baixei power_menu.xml no github e coloquei. Deu certo!


	## Configurar screenshots
		# Elas não estão salvando no diretório certo! Hardcode it on hyprland.conf

		# Set directories
		$HOME=/home/vvaxis
		$HYPRSHOT_DIR="$HOME/Pictures/screenshots"

		# Screenshot a window
		bind = $shiftMod, PRINT, exec, hyprshot -m window -o $HYPRSHOT_DIR
		# Screenshot a monitor
		bind = , PRINT, exec, hyprshot -m output -o $HYPRSHOT_DIR
		# Screenshot a region
		bind = $mainMod, PRINT, exec, hyprshot -m region -o $HYPRSHOT_DIR


	## Configurar notificações swaync
		#


	## Fazer com que bluetooth (blueberry) apareça na waybar


	## O File Manager (thunar) não está conseguindo abrir/executar arquivos.
		# Parece que também não tem permissões além de home.

		# É preciso instalar os plugins e integrações essenciais
		sudo pacman -S --needed  thunar thunar-volman gvfs gvfs-mtp gvfs-afc gvfs-smb tumbler ffmpegthumbnailer udisks2

		# Defaults de apps / abrir arquivos por MIME e “abrir terminal aqui” e Polkit para montar via Thunar
		sudo pacman -S --needed xdg-utils exo lxqt-policykit

		# O thunar procura um aplicativo com interface gráfica para funcionar
		# Criar a opção custom para abrir por micro em edit > configure custom actions > add >
		# Name: Abrir com Micro
		# Command: kitty -e micro %f

		# Para aparecerem os diretórios no canto:
		sudo micro /etc/fstab
		# Adicionar x-gvfs-show,x-gvfs-name=Games no fstab do sdb1
		# Também adicionei x-gvfs-show,x-gvfs-name=Home no fstab do sda2


	## CORRIGINDO CRASH
		# Do nada, monitor, teclado e mouse desligara, enquanto o PC permaneceu ligado
		# Falei com o chatgpt, ele formou uns logs e eu mandei tudo pra ele. Não dei pra ver nada.
		# Decidimos sair do kernel linux-zen para o linux padrão.

		# grava uma regra permanente dizendo ao kernel que o REISUB deve estar sempre ativado
		echo 'kernel.sysrq = 244' | sudo tee /etc/sysctl.d/99-sysrq.conf
		# aplica imediatamente essa nova configuração
		sudo sysctl --system

		# instala o kernel vanilla e seus headers (necessários para DKMS, módulos etc.)
		sudo pacman -S --needed linux linux-headers
		# regenera o arquivo de configuração do GRUB, criando as entradas pro novo kernel
		sudo grub-mkconfig -o /boot/grub/grub.cfg

		# adicionar o parâmetro 'amdgpu.gpu_recovery=1' na linha de comando do kernel no GRUB
		sudo micro /etc/default/grub
		# editar linhas:
		GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet zswap.enabled=1 zswap.compressor=zstd zswap.max_pool_percent=25"
		GRUB_CMDLINE_LINUX="root=UUID=8cc6f521-5535-4914-9ece-995c6c9202ba rootflags=subvol=@ amdgpu.gpu_recovery=1"

		# Fazer com que o menu do Grub mostre todos os kernels instalados de uma vez.
			# colocar o número em /etc/default/grub na linha 3
			GRUB_DEFAULT=4
			# tirar comentário (#) de:
			GRUB_DISABLE-SUBMENU=y

		# regenera o GRUB para aplicar a mudança
		sudo grub-mkconfig -o /boot/grub/grub.cfg

		# Fazer reboot
		reboot

	## NO AGUARDO, ESPERANDO QUE MELHORE!

	## Configurar impressoras e salvar como pdf 
		# Instalar CUPS, filtros e utilitários de linha de comando e PDF VIrtual
		sudo pacman -S cups cups-filters libcupsfilters cups-pdf

		# Habilitar e iniciar o servidor de impressão
		sudo systemctl enable --now cups.service

		# Criar diretório padrão para PDFs salvos
		mkdir ~/Downloads/PDF
		# Alterar pasta padrão nas configurações
		micro /etc/cups/cups-pdf.conf
		# Descomentar diretiva "out" e colocar ${HOME}/Downloads/PDF
	##ESSA É UMA CONFIGURAÇÃO PARCIAL, SERVE APENAS PARA IMPRIMIR COM PDF

	## Configurar o Hypridle (finalmente!)
		# Já tinha instalado, é só sudo pacman -S hypridle
		# Adicionar "exec-once = hypridle" ao hyprland.conf
		# Iniciar o serviço
		systemctl --user enable --now hypridle.service

		# Configurar (copiei a .conf de exemplo da wiki)
		micro ~/.config/hypr/hypridle.conf 

		# Precisa instalar algumas coisas pra funcionar
		sudo pacman -S brightnessctl

		# Cria arquivo para carregar automaticamente no boot:
		echo "i2c-dev" | sudo tee /etc/modules-load.d/i2c-dev.conf

		# Adiciona seu usuário ao grupo video:
		sudo usermod -aG video $USER
		# Cria regra udev para permitir acesso:
		sudo tee /etc/udev/rules.d/45-ddcutil.rules > /dev/null <<'EOF'
		KERNEL=="i2c-[0-9]*", GROUP="video", MODE="0660" EOF
		# Recarrega regras:
		sudo udevadm control --reload

	## Instalar o zsh com uma configuração bacana como padrão para facilitar
		# instalar o zsh base
		sudo pacman -S zsh
		# tornar o tipo de terminal padrão
		chsh -s /usr/bin/zsh

		# Agora, vou instalar a configuração de zsh do projeto grml. Foi recomendado por um usuário no reddit.
		# Manual baixado. No momento, mantenho a configuração default.
		 yay -S grml-zsh-config

	## Instalar e configurar GNU Stow para gerenciar dotfiles
		sudo pacman -S stow

		# Criar o diretório onde estarão organizadas todas as minhas dotfiles
		mkdir -p ~/dotfiles

		# Agora, é hora de estruturar pastas para cada pacote
		cd ~/dotfiles
		mkdir -p ~/dotfiles/hyprland/.config/hypr
		-p ~/dotfiles/waybar/.config/waybar
		# e assim por diante. precisa fazer exatamente o caminho onde seria a dotfile padrão
		# depois disso, precisa mover todos os arquivos das dotfiles padrão para ~/dotfiles.
		# Eu movi recortando e colando com o Thunar, para ter visualização.
		# Por dim, precisa apagar todas as pastas originais.
		rmdir hypr kitty micro rofi swaync Thunar waybar yay 

		# Agora, o stow vai criar o symlink que vai simular as configs
		stow kitty hyprland micro rofi swaync Thunar waybar yay

	## Aprender sobre Git e usar GitHub
		# O Git permite que eu salve versões de um projeto no qual estou trabalhando.
		# Se as configurações do meu sistema são um projeto, eu posso salvá-las.
		# Para eu (e outros) ter acesso ao projeto, eu upo no GitHub (é pra isso que serve

		# Primeiro, vamos entrar na pasta que vou querer salvar e versionar
		cd ~/dotfiles

		# Vou me identificar
		$ git config --global user.name "vvaxis"
		$ git config --global user.email "joaovitoralmeidaml@gmail.com"

		# Criar o repositório git com o nome da pasta principal "main"
		git init -b main

		# Criar um arquivo chamado .gitignore, que vai conter aquilo que não precisa salvar na versão (inúteis)
		touch .gitignore]
		micro .gitignore
		
		#Adicionar:
		# Ignorar arquivos de cache e temporários
		*.swp
		*.tmp
		.cache/
	
		# Adicionar e salvar tudo, com nome "Configurações iniciais"
		git add .
		git commit -m "Configurações iniciais"


### Rice


	
	sudo pacman -S stow



	## Criar a página inicial
		
	
	## Configurar DIREITO o snapper, snapshots e rollback

	##
